# ===============================
# = Application Properties
# ===============================
app.environment=LOCAL
app.name=MOCKII
app.description=${app.name} Spring boot application

# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
# Connection url for the database "netgloo_blog"
#spring.datasource.url = jdbc:mysql://mockii.cpl0gzrliq2k.us-west-2.rds.amazonaws.com:3306/MOCKII?useSSL=false
#spring.datasource.url=jdbc:mysql://bbf44134712ea9:cfe76dee@us-cdbr-iron-east-04.cleardb.net/heroku_e7cc9cb87d6f209?reconnect=true
spring.datasource.url=jdbc:mysql://ojkoi19lumd4zj8f:zmpgron1w0pztdvk@nuskkyrsgmn5rw8c.cbetxkdyhwsb.us-east-1.rds.amazonaws.com:3306/s4d3trb1fkz0yy2d
#spring.datasource.url=jdbc:mysql://localhost:3306/MOCKII?useSSL=false
# Username and password
#spring.datasource.username = mockii
#spring.datasource.password = mockii1985
spring.datasource.username=root
spring.datasource.password=root
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1


#####################################################################################
# Elastic Search properties                                                         #
#####################################################################################
elasticsearch.clusterName=mockii-cluster
elasticsearch.nodeName=mockii-node
elasticsearch.host=localhost
elasticsearch.port=9301


# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).
# Show or not log for each sql query
spring.jpa.show-sql = true
# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = validate
# Naming strategy
spring.jpa.hibernate.naming.physical-strategy = org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
# -------------------------------------
# LOGGING PROPERTIES
# -------------------------------------
logging.config=classpath:logback-LOCAL.xml
# -------------------------------------
# SERVER PROPERTIES
# -------------------------------------
server.context-path=/api
server.display-name=${app.name}
server.port=8080